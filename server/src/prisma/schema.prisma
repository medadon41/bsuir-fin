generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  name          String
  middleName    String
  surname       String
  password      String
  birthDate     DateTime
  is2faEnabled  Boolean         @default(false)
  mainBalance   Int             @default(0)
  publicId      String          @default("")  @unique
  otpKey        String?
  creditTickets CreditTicket[]
  transactions  Transaction[]
  loans         Loan[]
  tokens        Token[]
}

model StaffMember {
  id            Int             @id @default(autoincrement())
  role          Int
  userId        Int             @unique
  creditTickets CreditTicket[]
}

model Token {
  id            Int     @id @default(autoincrement())
  hash          String  @unique
  localName     String
  usagesAmount  Int
  usagesLeft    Int
  activeUntil   DateTime
  maxAmount     Float
  tokenStatus   Int
  ownerId       Int
  owner         User      @relation(fields: [ownerId], references: [id])
}

model Transaction {
  id                Int       @id @default(autoincrement())
  type              Int       @default(0)
  senderId          Int
  sender            User      @relation(fields: [senderId], references: [id])
  senderAccount     String
  receiverAccount   String
  amount            Float
  time              DateTime  @default(now())
  confirmation      Int
}

model Credit {
  id                Int       @id @default(autoincrement())
  active            Boolean   @default(true)
  title             String
  receiverAccount   String
  minAmount         Float
  maxAmount         Float
  percent           Float
  maxYears          Float     @default(0)
  minYears          Float     @default(0)
  tickets           CreditTicket[]
  loans             Loan[]
}

model CreditTicket {
  id            Int           @id @default(autoincrement())
  creditId      Int?
  credit        Credit?        @relation(fields: [creditId], references: [id], onDelete: Cascade)
  senderId      Int
  sender        User          @relation(fields: [senderId], references: [id])
  status        Int
  managerId     Int?
  manager       StaffMember?  @relation(fields: [managerId], references: [id])
  amount        Float
  years         Float         @default(0)
  comment       String        @default("")
}

model Loan {
  id                Int           @id @default(autoincrement())
  creditId          Int?
  credit            Credit?        @relation(fields: [creditId], references: [id], onDelete: SetNull)
  borrowerId        Int
  borrower          User          @relation(fields: [borrowerId], references: [id])
  dateStarted       DateTime      @default(now())
  dateExpire        DateTime
  dateLastCharged   DateTime?
  isRepaid          Boolean       @default(false)
  amount            Float
  amountRepaid      Float
}

